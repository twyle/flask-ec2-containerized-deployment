name: "Development Build"

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]
  workflow_dispatch:

jobs:

  Build:

    runs-on: ubuntu-latest

    environment:
      name: Test

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run the flake8 linter
      run: flake8

    - name: Run the pylint linter
      run: pylint --rcfile=.pylintrc api/

    # - name: Run the mypy linter
    #   run: mypy -p api

    - name: Create the Test Environment variables
      run: |
        touch .env
        echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
        echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
        echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env
        echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> .env
        echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
        echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
        echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
        echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

    - name: Create the test tables
      run: |
        python manage.py create_db

    - name: Test with pytest
      run: |
        if [ -d tests ] || [ -d test ]; then python -m pytest; fi

    - name: Pytest Coverage
      run: |
        if [ -d tests ] || [ -d test ]; then coverage run -m pytest; fi
        if [ -d tests ] || [ -d test ]; then coverage report -m; fi

    - name: Coverage Report
      run: coverage xml

  Test-Local:

    runs-on: ubuntu-latest

    environment:
      name: Development

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    needs: [Build]

    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Create the Environment variables
      run: |
        touch .env
        echo FLASK_APP=${{secrets.FLASK_APP}} >> .env
        echo FLASK_ENV=${{secrets.FLASK_ENV}} >> .env
        echo SECRET_KEY=${{secrets.SECRET_KEY}} >> .env
        echo POSTGRES_HOST=${{secrets.POSTGRES_HOST}} >> .env
        echo POSTGRES_DB=${{secrets.POSTGRES_DB}} >> .env
        echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >> .env
        echo POSTGRES_USER=${{secrets.POSTGRES_USER}} >> .env
        echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env

    - name: Create the development tables
      run: |
        python manage.py create_db

    - name: Test application
      run: |
        python manage.py seed_db
        python manage.py run &
        sleep 10
        curl http://127.0.0.1:5000/home
        curl http://127.0.0.1:5000/users

  DeployDev:

    name: Deploy to Dev

    needs: [Test-Local]

    runs-on: ubuntu-latest

    environment:
      name: Development

    steps:

      - name: Deploy
        run: echo I am deploying the api to AWS

      - name: Deploy to linode
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          HOST_NAME : ${{ secrets.HOST_NAME  }}
          USER_NAME : ${{ secrets.USER_NAME  }}
          USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
          APP_DIR: ${{secrets.APP_DIR}}
          SERVICE_NAME: ${{secrets.SERVICE_NAME}}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} "
            cd ${APP_DIR} &&
            git pull &&
            echo ${USER_PASSWORD} | sudo -S systemctl restart ${SERVICE_NAME} "

      - name: Deploy to Linode
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.HOST_IP}}
          username: ${{secrets.USER_NAME}}
          password: ${{secrets.USER_PASSWORD}}
          script: |
            cd ${{secrets.APP_DIR}}
            git pull
            echo ${{secrets.USER_PASSWORD}} | sudo -S systemctl restart ${{secrets.SERVICE_NAME}}

  Test-Remote:

    name: Test Remote Deployment

    needs: [DeployDev]

    runs-on: ubuntu-latest

    environment:
      name: Development

    steps:
    - name: Test application
      run: |
        sleep 5
        curl ${{secrets.HOST_IP}}/home | grep "template api"
